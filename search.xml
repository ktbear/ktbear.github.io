<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>springboot入门</title>
    <url>/Details/02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Apr 24 2020 13:30:45 GMT+0800 (GMT+08:00) --><html><head></head><body><p><img src="http://q84xw1r4s.bkt.clouddn.com/20200420160644.png" alt></p><a id="more"></a><h2 id="1-初识springboot"><a href="#1-初识springboot" class="headerlink" title="1.初识springboot"></a>1.初识springboot</h2><ul><li>SpringBoot是由Pivotal团队在2013年开始研发、2014年4月发布第一个版本的全新开源的轻量级框架。它基于Spring4.0设计，不仅继承了Spring框架原有的优秀特性，而且还通过简化配置来进一步简化了Spring应用的整个搭建和开发过程。另外SpringBoot通过集成大量的框架使得依赖包的版本冲突，以及引用的不稳定性等问题得到了很好的解决。可能这样说了你还是很懵逼，用通俗易懂的语言将就是帮助我们简化传统的ssm框架等的配置，比如各种繁琐的xml配置。</li></ul><h2 id="2-环境"><a href="#2-环境" class="headerlink" title="2.环境"></a>2.环境</h2><ul><li>jdk</li><li>maven</li><li>idea</li></ul><h2 id="3-springboot优势"><a href="#3-springboot优势" class="headerlink" title="3.springboot优势"></a>3.springboot优势</h2><ol><li>springboot可以帮助我们自动装配javabean</li><li>springboot可以帮我们自动配置事务</li><li>springboot可以帮我们加载配置文件</li><li>springboot内嵌tomcat</li></ol><p>这些都是springboot一些优点，当然还不止这些，比如支持热部署，日志，各种引擎模板，还可以整合其他优秀的框架等等。</p><h2 id="4-入门"><a href="#4-入门" class="headerlink" title="4.入门"></a>4.入门</h2><p>步骤如下：<br>1.首先新建项目选择Spring Initializr，点击右边的next</p><p><img src="http://q84xw1r4s.bkt.clouddn.com/20200403222500.png" alt></p><p>2.然后输入规范包名、项目名，一般是自动生成，然后next</p><p><img src="http://q84xw1r4s.bkt.clouddn.com/20200403223507.png" alt></p><p>3.选择需要的依赖，这里为了方便演示选择了springWeb依赖，然后next,选择项目存储位置，最后finish,这样下项目初始化完成</p><p><img src="http://q84xw1r4s.bkt.clouddn.com/20200403224525.png" alt></p><p>4.可以删除项目中多余的文件，接下展开文件夹你便可以看到xxxApplication的类啦，这个就是程序主入口，我们先在demo目录下创建一个test目录，并在其下面创建Controller类，然后类上面加Controller注解表示这个类被springboot自动装配到容器中，再加上GetMapping、ResponseBody注解映射，这里加入ResponseBody会在浏览器返回字符串，否则会返回springboot默认的，也就是resources下面的html，由于没有定义页面，启动后会报404错误。</p><p><img src="http://q84xw1r4s.bkt.clouddn.com/20200403230931.png" alt></p><p>5.找到上面的程序主入口启动项目，等待几秒钟</p><p><img src="http://q84xw1r4s.bkt.clouddn.com/20200403232005.png" alt></p><p>6.最后浏览器输入localhost:8080，你就可以看到”hello world!”啦</p><p>是不是觉得so easy啊!</p><!-- rebuild by neat --></body></html>]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署springboot项目</title>
    <url>/zh/20/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Apr 24 2020 13:30:44 GMT+0800 (GMT+08:00) --><html><head></head><body><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><blockquote><p>需要的知识</p></blockquote><ul><li>Linux操作系统</li><li>docker(了解git的工作方式即可)</li></ul><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><blockquote><p>xshell(用来连接linux服务器)<br>xftp用来给linux服务器上传文件<br>sqlyog(或者navicat)在服务器上解析.sql脚本<br>maven(idea自带) 用来打包</p></blockquote><h5 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h5><p>简单介绍一下，docker我理解的就是更方便的部署工具，如果有玩过服务器的同学都知道，在linux服务器上配置mysql是一件挺麻烦的事，而用了docker，只需要几个命令，就可以配置好mysql。</p><p>docker 的三个概念:</p><p>仓库：仓库就类比于github仓库，上面存储着各种各样版本的软件<br>镜像，我们从docker上拉取一个软件初始就是个镜像<br>容器，容器就是镜像运行时，可以用的软件<br>类比一下好理解，镜像就是java中的类，而容器则是由类生成的对象，类无法直接使用，而对象可以。</p><p>接下来开始实操</p><p>我们按照官网来</p><p>在安装docker前，先安装docker的包</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></tbody></table></figure><p>配置docker的仓库，从docker官方仓库下载会太慢，我们就将仓库配置到阿里云(类似于maven的仓库配置)</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></tbody></table></figure><h5 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h5><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></tbody></table></figure><p>运行中出现Is this ok,选择y</p><p>要继续配置一下阿里云镜像加速,按如下步骤完成即可.</p><p>步骤2，是写配置文件</p><ol><li><p>mkdir -p /etc/docker</p></li><li><p>vim /etc/docker/daemon.json</p></li><li><p>systemctl daemon-reload</p></li><li><p>systemctl restart docker</p><ul><li>步骤2的配置文件格式<br>{<br>“registry-mirrors”: [“https://｛自已的编码｝.mirror.aliyuncs.com”]<br>}<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">在阿里云镜像云查看镜像加速器配置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">开启docker</span><br><span class="line"></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line">跑一个docker版的helloworld，类似于java的hello，证明安装成功</span><br><span class="line"></span><br><span class="line">sudo docker run hello-world</span><br><span class="line"></span><br><span class="line">出现下图内容，表示docker运行成功</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 服务器的配置</span><br><span class="line">服务器配置总结为三个，防火墙，端口，和安全组</span><br><span class="line"></span><br><span class="line">1.查看防火墙状态，如未开启要开启防火墙，我的是开启的</span><br><span class="line"></span><br><span class="line">firewall-cmd --state</span><br><span class="line"></span><br><span class="line">如果没开启，开启防火墙的命令</span><br><span class="line"></span><br><span class="line">systemctl start firewalld.service</span><br><span class="line"></span><br><span class="line">添加对外开放的端口，我是开了三个端口，一个80(Http端口),一个8080(tomcat)，一个2206(mysql)</span><br><span class="line">```linux</span><br><span class="line">1. firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">2. firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">3. firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br></pre></td></tr></tbody></table></figure>开完端口，要重新加载防火墙</li></ul></li></ol><p>firewall-cmd –reload</p><p>查看开放的端口</p><p>firewall-cmd –list-ports</p><p>配置安全组:百度如何配置进入配安全组的地方，按照下图配置的条件配置即可</p><h5 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h5><p>从docker hub上查找mysql镜像</p><p>docker search mysql</p><p>从docker hub上拉取mysql,我拉取的mysql版本是mysql5.7</p><p>docker pull mysql:5.7</p><p>运行mysql，开放的端口是3306，密码是123456， -d是后台运行</p><p>docker run -p 3306:3306 –name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</p><p>docker ps 查看容器创建成功</p><p>有个命令，可以进入容器内部,ctrl+p+q可以以后台运行的方式退出这个软件</p><p>docker exec -it 容器的id /bin/bash</p><p>连接服务器上的mysql</p><p>执行我提供的sql脚本就好了</p><p>执行成功</p><p>将springboot项目打成jar包<br>将applicayion.yml中的url中的localhost改成你服务器的公网ip，还有将密码改成你服务器上mysql的密码</p><p>打包的命令有两个，mvn clean ,mvn package</p><p>在target文件夹出现jar表示成功</p><h5 id="编写Dockfile文件"><a href="#编写Dockfile文件" class="headerlink" title="编写Dockfile文件"></a>编写Dockfile文件</h5><p>将springboot jar包项目打包成Docker镜像</p><p>在 /home 目录下创建docker文件夹</p><p>mkdir /home/docker<br>使用xftp上传jar包</p><p>编写Dockerfile文件</p><p>vim Dockerfile</p><p>完整命令, vim的使用方法：点击i开始编写，编写完后点击esc，点击冒号，输入wq保存</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">ADD blog-0.0.1-SNAPSHOT.jar /blog.jar</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT ["java","-jar","/blog.jar"]</span><br></pre></td></tr></tbody></table></figure><p>解释</p><p>#注意，docker命令全部大写，这是规定。</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#注意，docker命令全部大写，这是规定。</span><br><span class="line">#   From 关键字表示，jar包依赖的环境。java:8  相当于jdk1.8</span><br><span class="line">FROM java:8</span><br><span class="line"> </span><br><span class="line">#ADD命令 </span><br><span class="line">#   blog-0.0.1-SNAPSHOT.jar：这是你上传jar包的名称。</span><br><span class="line">#   /blog.jar：这是自定义的名称。但是注意要有之前的/</span><br><span class="line">ADD blog-0.0.1-SNAPSHOT.jar /blog.jar</span><br><span class="line"> </span><br><span class="line">#MAINTAINER  作者名称。可以删除不写。</span><br><span class="line">MAINTAINER zhangxiaosan</span><br><span class="line"> </span><br><span class="line">#EXPOSE 项目暴露的端口号</span><br><span class="line">EXPOSE 8080</span><br><span class="line"> </span><br><span class="line">#/blog.jar此处的名称要和ADD命令后面的一样。</span><br><span class="line">ENTRYPOINT ["java","-jar","/blog.jar"]</span><br></pre></td></tr></tbody></table></figure><p>在docker文件夹下执行如下命令</p><p>docker build -t blog:1.0 .</p><p>说明:<br>blog 代表要打包成的镜像名称。按照自己实际情况写。<br>:1.0 代表版本号，可以不写则默认为latest<br>. 代表为当前目录。这就是为什么一直在步骤一文件夹中进行操作,并且Dockerfile在此文件夹中的原因。</p><p>若之前Dockerfile不在步骤一的文件夹中 则需要指定到对应的地址。</p><p>接下来用docker images 就可以查看到这个镜像已经被创建好了，接下来运行这个镜像就可以了</p><p>docker run –name blog -d -p 80:8080 blog:1.0</p><p>此时就可以用你的公网ip访问了，我绑定了域名，可以用域名访问。</p><p>还有个命令要提下，可以查看容器运行时的日志</p><p>docker logs 容器id</p><!-- rebuild by neat --></body></html>]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>APlayer音乐插件</title>
    <url>/Details/12/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Apr 24 2020 13:30:45 GMT+0800 (GMT+08:00) --><html><head></head><body><p><img src="http://q84xw1r4s.bkt.clouddn.com/20200412130947.png" alt></p><a id="more"></a><h3 id="1-APlayer"><a href="#1-APlayer" class="headerlink" title="1. APlayer"></a>1. APlayer</h3><p>APlayer是大佬们开发出来的一款HTML5漂亮的音乐插件，<a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">GitHub下载地址</a>。</p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><p>下载好插件放到自己的工程，</p><ul><li>在需要加入的html页面导入插件css、js</li></ul><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag"><<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"APlayer.min.css"</span>></span></span><br><span class="line"><span class="tag"><<span class="name">script</span> <span class="attr">src</span>=<span class="string">"APlayer.min.js"</span>></span><span class="tag"></<span class="name">script</span>></span></span><br></pre></td></tr></tbody></table></figure><ul><li>在需要放置插件的位置处的html元素赋予id属性，比如</li></ul><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag"><<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aplayer"</span>></span><span class="tag"></<span class="name">div</span>></span></span><br></pre></td></tr></tbody></table></figure><ul><li>在body后加入以下</li></ul><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag"><<span class="name">script</span>></span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> ap = <span class="keyword">new</span> APlayer({</span></span><br><span class="line"><span class="javascript">    container: <span class="built_in">document</span>.getElementById(<span class="string">'aplayer'</span>),</span></span><br><span class="line">    audio: [{</span><br><span class="line"><span class="actionscript">        name: <span class="string">'name1'</span>,</span></span><br><span class="line"><span class="actionscript">        artist: <span class="string">'artist1'</span>,</span></span><br><span class="line"><span class="actionscript">        url: <span class="string">'url1.mp3'</span>,</span></span><br><span class="line"><span class="actionscript">        cover: <span class="string">'cover1.jpg'</span></span></span><br><span class="line">    },</span><br><span class="line">     {</span><br><span class="line"><span class="actionscript">        name: <span class="string">'name2'</span>,</span></span><br><span class="line"><span class="actionscript">        artist: <span class="string">'artist2'</span>,</span></span><br><span class="line"><span class="actionscript">        url: <span class="string">'url2.mp3'</span>,</span></span><br><span class="line"><span class="actionscript">        cover: <span class="string">'cover2.jpg'</span></span></span><br><span class="line">    }</span><br><span class="line">           ]</span><br><span class="line">});</span><br><span class="line"><span class="tag"></<span class="name">script</span>></span></span><br></pre></td></tr></tbody></table></figure><p>或者自定义js然后引入即可</p><ul><li>name: 歌曲名</li><li>artist: 歌曲作者</li><li>cover: 歌曲图片</li><li>url: 音乐地址</li></ul><p>这里我介绍个好用的音乐外链获取网站:<a href="http://music.xf1433.com/" target="_blank" rel="noopener">http://music.xf1433.com/</a></p><h3 id="3-可选参数"><a href="#3-可选参数" class="headerlink" title="3. 可选参数"></a>3. 可选参数</h3><style>table th:nth-of-type(1){width:70px}</style><table><thead><tr><th>名称</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>mini</td><td>false</td><td>开启迷你模式</td></tr><tr><td>fixed</td><td>false</td><td>开启吸底模式</td></tr><tr><td>autoplay</td><td>false</td><td>音频自动播放</td></tr><tr><td>theme</td><td>‘#b7daff’</td><td>主题色</td></tr><tr><td>loop</td><td>‘all’</td><td>音频循环播放, 可选值: ‘all’, ‘one’, ‘none’</td></tr><tr><td>preload</td><td>‘auto’</td><td>预加载，可选值: ‘none’, ‘metadata’, ‘auto’</td></tr><tr><td>volume</td><td>0.7</td><td>默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</td></tr><tr><td>container</td><td>document.querySelector(‘.aplayer’)</td><td>播放器容器元素</td></tr></tbody></table><h3 id="4-API"><a href="#4-API" class="headerlink" title="4. API"></a>4. API</h3><ul><li><code>ap.play()</code>: 播放音频</li><li><code>ap.pause()</code>: 暂停音频</li><li><code>ap.audio.currentTime</code>: 返回音频当前播放时间</li><li><code>ap.audio.duration</code>: 返回音频总时间</li><li><code>ap.audio.paused</code>: 返回音频是否暂停</li></ul><p>这里列举的都是常用的，详细请到官网<a href="https://aplayer.js.org" target="_blank" rel="noopener">https://aplayer.js.org</a></p><p>完成以上工作你就可以看到界面中有音乐了，但是还有个问题出现了，就是不能刷新页面继续上次的记录播放，看到许多人说用frame标签和ajax、<a href="http://bsify.admui.com/jquery-pjax/" target="_blank" rel="noopener">pjax</a>:</p><ul><li><p>frame例子</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag"><<span class="name">html</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"><<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"0%,100%"</span>></span></span><br><span class="line">  <span class="comment"><!--音乐插件另外放在music页面--></span></span><br><span class="line"><span class="tag"><<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"music.html"</span>></span></span><br><span class="line"> <span class="comment"><!--首页页面--></span></span><br><span class="line"><span class="tag"><<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"index.html"</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"></<span class="name">frameset</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"></<span class="name">html</span>></span></span><br></pre></td></tr></tbody></table></figure><p>缺点: 这样音乐可以连续播放，但没办法在index.html页面中控制音频播放</p></li><li><p>pjax (和ajax相似，相当于ajax的加强版)</p><p>首先下载<a href="https://github.com/defunkt/jquery-pjax" target="_blank" rel="noopener">jquery-pjax插件</a></p><p>引入jquery和jquery-pjax</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag"><<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"</span>></span><span class="tag"></<span class="name">script</span>></span></span><br><span class="line"><span class="tag"><<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery.pjax/2.0.1/jquery.pjax.min.js"</span>></span><span class="tag"></<span class="name">script</span>></span></span><br></pre></td></tr></tbody></table></figure><p>将要局部更新的内容用div包裹，指定属性id</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag"><<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>></span></span><br><span class="line">    <span class="comment"><!-- 要替换的内容 --></span>	</span><br><span class="line">  <span class="tag"></<span class="name">div</span>></span></span><br></pre></td></tr></tbody></table></figure><p>在body后定义js,下面将会使id为container下的所有a标签跳转，没有后台需添加fragment容器</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag"><<span class="name">script</span>></span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).pjax(<span class="string">'a[target!="_blank"]'</span>, <span class="string">'#container'</span>, {</span></span><br><span class="line"><span class="actionscript">    fragment: <span class="string">"#container"</span>,</span></span><br><span class="line">    timeout: 5000</span><br><span class="line">});</span><br><span class="line"><span class="tag"></<span class="name">script</span>></span></span><br></pre></td></tr></tbody></table></figure></li></ul><p>最后感谢各位大佬们的贡献！</p><!-- rebuild by neat --></body></html>]]></content>
      <categories>
        <category>插件</category>
      </categories>
      <tags>
        <tag>音乐</tag>
        <tag>pjax</tag>
      </tags>
  </entry>
  <entry>
    <title>spring笔记</title>
    <url>/note/10/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Apr 24 2020 13:30:45 GMT+0800 (GMT+08:00) --><html><head></head><body><p><img src="http://q84xw1r4s.bkt.clouddn.com/20200420160852.jpg" alt></p><a id="more"></a><h6 id="1-导入maven依赖"><a href="#1-导入maven依赖" class="headerlink" title="1. 导入maven依赖"></a>1. 导入maven依赖</h6><ul><li>注意：导入相关依赖，为了减少手写也可直接导入spring-webmvc依赖包</li></ul><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"><?xml version="1.0" encoding="UTF-8"?></span></span><br><span class="line"><span class="tag"><<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">modelVersion</span>></span>4.0.0<span class="tag"></<span class="name">modelVersion</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"><<span class="name">groupId</span>></span>org.example<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">artifactId</span>></span>spring_01<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">version</span>></span>1.0-SNAPSHOT<span class="tag"></<span class="name">version</span>></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag"><<span class="name">dependencies</span>></span></span><br><span class="line"><span class="comment"><!--导入spring及其相关依赖（aop,beans,context,core,expression,spring-web：spring-webmvc包含spring相关依赖--></span></span><br><span class="line">    <span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">groupId</span>></span>org.springframework<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">artifactId</span>></span>spring-webmvc<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">version</span>></span>5.2.2.RELEASE<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line"><span class="comment"><!--    单元测试--></span></span><br><span class="line">    <span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">groupId</span>></span>junit<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">artifactId</span>></span>junit<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">version</span>></span>4.12<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">scope</span>></span>test<span class="tag"></<span class="name">scope</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line"><span class="tag"></<span class="name">dependencies</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"></<span class="name">project</span>></span></span><br></pre></td></tr></tbody></table></figure><h6 id="2-ApplicationContext-xml全局配置文件"><a href="#2-ApplicationContext-xml全局配置文件" class="headerlink" title="2.ApplicationContext.xml全局配置文件"></a>2.ApplicationContext.xml全局配置文件</h6><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"><?xml version="1.0" encoding="UTF-8"?></span></span><br><span class="line"><span class="tag"><<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd"</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><!-- 指定扫描org.example包下的所有类中的注解  --></span></span><br><span class="line">    <span class="tag"><<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.example"</span>></span><span class="tag"></<span class="name">context:component-scan</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><!--开启注解--></span></span><br><span class="line">    <span class="tag"><<span class="name">context:annotation-config</span>/></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><!--spring容器中bean对象--></span></span><br><span class="line">  <span class="comment"><!--  <bean id="user" class="org.example.pojo.User"></span></span><br><span class="line"><span class="comment">        <property name="name" value="chengLong"/></span></span><br><span class="line"><span class="comment">    </bean></span></span><br><span class="line"><span class="comment">--></span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><!-- more bean definitions go here --></span></span><br><span class="line"></span><br><span class="line"><span class="tag"></<span class="name">beans</span>></span></span><br></pre></td></tr></tbody></table></figure><h6 id="3-静态代理"><a href="#3-静态代理" class="headerlink" title="3. 静态代理"></a>3. 静态代理</h6><ul><li><p>代理模式分为三个角色：被代理角色、代理角色、客户角色，以租房为实例进行演示：</p><ul><li>租房抽象接口类</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*租房抽象接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>{</span><br><span class="line">    <span class="comment">//出租房屋的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>被代理对象类（房东）</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*真实角色（房东）*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"xx要出租房屋"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>代理对象类（租房中介）</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*代理角色（房屋中介）*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>{</span><br><span class="line">    <span class="comment">//被代理的类</span></span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHost</span><span class="params">(Host host)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//调用代理类特有的方法实现不修改原有代码（host类）而实现功能的增加</span></span><br><span class="line">        pre();</span><br><span class="line"></span><br><span class="line">        host.rent();</span><br><span class="line"></span><br><span class="line">        after();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//代理类特有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"【Debug】"</span>+<span class="string">"带客户看房"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//代理类特有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"【Debug】"</span>+<span class="string">"收取租金并签定租赁合同"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>客户类</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*客户*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line"></span><br><span class="line">        proxy proxy = <span class="keyword">new</span> proxy();</span><br><span class="line">        proxy.setHost(host);</span><br><span class="line">        proxy.rent();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h6 id="4-动态代理"><a href="#4-动态代理" class="headerlink" title="4. 动态代理"></a>4. 动态代理</h6><ul><li>动态代理即动态生成代理类，实例以静态代理为基础做升级。</li><li>抽象接口</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*租房抽象接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>{</span><br><span class="line">    <span class="comment">//出租房屋的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>被代理类</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*真实角色（房东）*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"xx要出租房屋"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>实现<strong>InvocationHandler</strong>接口的类用于动态生成代理</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*动态代理万能模板,InvocationHandler这个类自动生成代理类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Object target;<span class="comment">//被代理的接口</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例并返回结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line"></span><br><span class="line">        before(method.getName());</span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        after(method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(String b)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"[Debug]:"</span>+b+<span class="string">"方法初始化"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(String a)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"[Debug]:"</span>+a+<span class="string">"方法结束"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*客户*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line">        <span class="comment">//代理角色，不存在</span></span><br><span class="line">        ProxyInvocationHandler pid = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        <span class="comment">//设置要代理的对象</span></span><br><span class="line">        pid.setTarget(host);</span><br><span class="line">        <span class="comment">//动态生成代理类</span></span><br><span class="line">        Rent proxy =(Rent) pid.getProxy();</span><br><span class="line">        proxy.rent();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>输出结果</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">[Debug]:rent方法初始化</span><br><span class="line">xx要出租房屋</span><br><span class="line">[Debug]:rent方法结束</span><br></pre></td></tr></tbody></table></figure><h6 id="5-aop面向切面编程"><a href="#5-aop面向切面编程" class="headerlink" title="5. aop面向切面编程"></a>5. aop面向切面编程</h6><p>​ 5.1 aop面向切面编程有三种方法分别是面向接口的aop配置、面向切面的aop配置、注解配置。</p><p>方法一：</p><ul><li>接口和实体类(被代理类、目标类)</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*业务抽象接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*真实业务*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"添加用户"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"删除用户"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"修改用户"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"查询用户"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>要增强的特定方法（通知）</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*方法一    前置方法*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Before</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        System.out.println(method.getName()+<span class="string">"方法被初始化了"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*方法一    后置方法*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">After</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object o, Method method, Object[] objects, Object o1)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        System.out.println(method.getName()+<span class="string">"方法结束了"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>装配bean和配置aop</li></ul><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"><?xml version="1.0" encoding="UTF-8"?></span></span><br><span class="line"><span class="tag"><<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd"</span>></span></span><br><span class="line"></span><br><span class="line"><span class="comment"><!--注册bean--></span></span><br><span class="line">    <span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"before"</span> <span class="attr">class</span>=<span class="string">"org.example.advice.Before"</span>></span><span class="tag"></<span class="name">bean</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"org.example.service.UserServiceImpl"</span>></span><span class="tag"></<span class="name">bean</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"after"</span> <span class="attr">class</span>=<span class="string">"org.example.advice.After"</span>></span><span class="tag"></<span class="name">bean</span>></span></span><br><span class="line">    <span class="comment"><!--方法二--></span></span><br><span class="line">    <span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aspect"</span> <span class="attr">class</span>=<span class="string">"org.example.aspect.Aspect"</span>></span><span class="tag"></<span class="name">bean</span>></span></span><br><span class="line">    <span class="comment"><!--aop配置   方法一 原生态面向接口（功能强大）--></span></span><br><span class="line">    <span class="tag"><<span class="name">aop:config</span>></span></span><br><span class="line">        <span class="comment"><!--expression:表达式，execution(返回类型 具体类.方法(参数)) *代表所有类型--></span></span><br><span class="line">        <span class="tag"><<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.example.service.UserServiceImpl.*(..))"</span>/></span></span><br><span class="line">        <span class="comment"><!--环绕通知 前置--></span></span><br><span class="line">        <span class="tag"><<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>></span><span class="tag"></<span class="name">aop:advisor</span>></span></span><br><span class="line">        <span class="comment"><!--后置--></span></span><br><span class="line">        <span class="tag"><<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>></span><span class="tag"></<span class="name">aop:advisor</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"></<span class="name">aop:config</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><!--方法二 面向切面--></span></span><br><span class="line">   <span class="tag"><<span class="name">aop:config</span>></span></span><br><span class="line">       <span class="tag"><<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.example.service.UserServiceImpl.*(..))"</span>/></span></span><br><span class="line">       <span class="tag"><<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"aspect"</span> ></span></span><br><span class="line">           <span class="tag"><<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>></span><span class="tag"></<span class="name">aop:before</span>></span></span><br><span class="line">           <span class="tag"><<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>></span><span class="tag"></<span class="name">aop:after</span>></span></span><br><span class="line">       <span class="tag"></<span class="name">aop:aspect</span>></span></span><br><span class="line">   <span class="tag"></<span class="name">aop:config</span>></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag"></<span class="name">beans</span>></span></span><br></pre></td></tr></tbody></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.example.service.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ApplicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//获取接口对象</span></span><br><span class="line">        UserService userService = context.getBean(<span class="string">"userService"</span>, UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       userService.add();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>运行结果</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">add方法被初始化了</span><br><span class="line">添加用户</span><br><span class="line">add方法结束了</span><br></pre></td></tr></tbody></table></figure><p>方法二：</p><ul><li>实体类和接口如同方法一，不同之处是通知及配置，通知类如下</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.aspect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*方法二 面向切面*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Aspect</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"方法执行了"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"方法结束了"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>ApplicationContext.xml配置文件详解方法一</li></ul><!-- rebuild by neat --></body></html>]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>aop</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建mybatis</title>
    <url>/Details/09/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Apr 24 2020 13:30:45 GMT+0800 (GMT+08:00) --><html><head></head><body><p><img src="http://q84xw1r4s.bkt.clouddn.com/20200412201817.jpg" alt></p><a id="more"></a><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录</p><h6 id="1-基础项目目录结构"><a href="#1-基础项目目录结构" class="headerlink" title="1. 基础项目目录结构"></a>1. 基础项目目录结构</h6><p><img src="http://q84xw1r4s.bkt.clouddn.com/20200409164327.png" alt="load"></p><h6 id="2-maven依赖"><a href="#2-maven依赖" class="headerlink" title="2. maven依赖"></a>2. maven依赖</h6><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"><?xml version="1.0" encoding="UTF-8"?></span></span><br><span class="line"><span class="tag"><<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">modelVersion</span>></span>4.0.0<span class="tag"></<span class="name">modelVersion</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="tag"><<span class="name">groupId</span>></span>org.org.example<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">artifactId</span>></span>mybatis_01<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">version</span>></span>1.0-SNAPSHOT<span class="tag"></<span class="name">version</span>></span></span><br><span class="line"><span class="comment"><!--java文件中xml映射默认无法扫描，需加上build即可扫描xml配置文件--></span></span><br><span class="line">    <span class="tag"><<span class="name">build</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">resources</span>></span></span><br><span class="line">            <span class="comment"><!-- resources文件 --></span></span><br><span class="line">            <span class="tag"><<span class="name">resource</span>></span></span><br><span class="line">                <span class="tag"><<span class="name">directory</span>></span>src/main/java<span class="tag"></<span class="name">directory</span>></span></span><br><span class="line">                <span class="comment"><!-- 引入映射文件等 --></span></span><br><span class="line">                <span class="tag"><<span class="name">includes</span>></span></span><br><span class="line">                    <span class="tag"><<span class="name">include</span>></span>**/*.xml<span class="tag"></<span class="name">include</span>></span></span><br><span class="line">                <span class="tag"></<span class="name">includes</span>></span></span><br><span class="line">            <span class="tag"></<span class="name">resource</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">resources</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">build</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">dependencies</span>></span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><!--mybatis--></span></span><br><span class="line">        <span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">groupId</span>></span>org.mybatis<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">artifactId</span>></span>mybatis<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">version</span>></span>3.4.6<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line">        <span class="comment"><!--mysql连接驱动--></span></span><br><span class="line">        <span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">groupId</span>></span>MySQL<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">artifactId</span>></span>mysql-connector-java<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">version</span>></span>5.1.40<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><!--junit测试--></span></span><br><span class="line">        <span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">groupId</span>></span>junit<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">artifactId</span>></span>junit<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">version</span>></span>4.12<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">scope</span>></span>test<span class="tag"></<span class="name">scope</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag"></<span class="name">dependencies</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"></<span class="name">project</span>></span></span><br></pre></td></tr></tbody></table></figure><h6 id="3-全局配置mybatis-config-xml"><a href="#3-全局配置mybatis-config-xml" class="headerlink" title="3. 全局配置mybatis-config.xml"></a>3. 全局配置mybatis-config.xml</h6><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"><?xml version="1.0" encoding="UTF-8" ?></span></span><br><span class="line"><span class="meta"><!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>></span></span><br><span class="line"><span class="tag"><<span class="name">configuration</span>></span></span><br><span class="line"><span class="comment"><!--别名，包名默认为类的小写--></span></span><br><span class="line">   <span class="comment"><!--</span></span><br><span class="line"><span class="comment">   <typeAlias type="org.example.pojo.User" alias="User"/></span></span><br><span class="line"><span class="comment">   --></span></span><br><span class="line">    <span class="tag"><<span class="name">typeAliases</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">package</span> <span class="attr">name</span>=<span class="string">"org.example.pojo"</span>/></span></span><br><span class="line">    <span class="tag"></<span class="name">typeAliases</span>></span></span><br><span class="line"><span class="comment"><!--环境--></span></span><br><span class="line">    <span class="tag"><<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/></span></span><br><span class="line">            <span class="tag"><<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>></span></span><br><span class="line">                <span class="tag"><<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/></span></span><br><span class="line"><span class="comment"><!--?useUnicode=true&amp;characterEncoding=utf8解决中文乱码--></span></span><br><span class="line">                <span class="tag"><<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/login?useUnicode=true<span class="symbol">&amp;</span>characterEncoding=utf8"</span>/></span></span><br><span class="line">                <span class="tag"><<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/></span></span><br><span class="line">                <span class="tag"><<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/></span></span><br><span class="line">            <span class="tag"></<span class="name">dataSource</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">environment</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">environments</span>></span></span><br><span class="line"></span><br><span class="line"><span class="comment"><!--映射sql配置文件--></span></span><br><span class="line">    <span class="tag"><<span class="name">mappers</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/example/dao/UserMapper.xml"</span>/></span></span><br><span class="line">    <span class="tag"></<span class="name">mappers</span>></span></span><br><span class="line"><span class="tag"></<span class="name">configuration</span>></span></span><br></pre></td></tr></tbody></table></figure><h6 id="4-接口绑定配置文件UserMapper-xml"><a href="#4-接口绑定配置文件UserMapper-xml" class="headerlink" title="4. 接口绑定配置文件UserMapper.xml"></a>4. 接口绑定配置文件UserMapper.xml</h6><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"><?xml version="1.0" encoding="UTF-8" ?></span></span><br><span class="line">        <span class="meta"><!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">                <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">                <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>></span></span><br><span class="line"><span class="comment"><!--绑定接口全限定类名--></span></span><br><span class="line"><span class="tag"><<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.example.dao.UserMapper"</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"><<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUser"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>></span></span><br><span class="line">    select *from login.user</span><br><span class="line"><span class="tag"></<span class="name">select</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"><<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>></span></span><br><span class="line">    select *from login.user where id=#{id}</span><br><span class="line"><span class="tag"></<span class="name">select</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"><<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"org.example.pojo.User"</span>></span></span><br><span class="line">    insert into login.user (id,username,password) values (#{id},#{username},#{password})</span><br><span class="line"><span class="tag"></<span class="name">insert</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"><<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"org.example.pojo.User"</span>></span></span><br><span class="line">        update login.user set username=#{username},paassword=#{password} where id={id}</span><br><span class="line">    <span class="tag"></<span class="name">update</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"><<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>></span></span><br><span class="line">        delete from login.user where id=#{id}</span><br><span class="line">    <span class="tag"></<span class="name">delete</span>></span></span><br><span class="line"><span class="tag"></<span class="name">mapper</span>></span></span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --></body></html>]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>jdbc</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>使用lombok报错解决</title>
    <url>/err/09/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Apr 24 2020 13:30:45 GMT+0800 (GMT+08:00) --><html><head></head><body><p>之前做项目时在使用lombok插件启动项目时报错，在此记录一下</p><a id="more"></a><p>，希望能帮到大家。</p><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">ERROR o.a.c.c.C.[.[.[.【dispatcherServlet】 - Servlet.service() <span class="keyword">for</span> servlet 【dispatcherServlet】 in context with path 【】 threw exception 【Handler processing failed; nested exception is java.lang.StackOverflowError】 with root cause</span><br><span class="line">java.lang.StackOverflowError: <span class="keyword">null</span></span><br></pre></td></tr></tbody></table></figure><ul><li>出现以上错误并且实体类之间不停的出现调用，这个问题是由于实体类之间存在关系，在使用lombok的注解时是会默认生成tostring方法，在一方调用另一方的时候就会出现相互调用的情况，所以会出现栈溢出的情况。<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4></li><li>取消一方实体类的tostring方法，即在需要取消的属性上加上lombok注解@ToString.Exclude或者在类似加上@ToString(exclude=”属性名”)，好了，问题得到解决。</li></ul><!-- rebuild by neat --></body></html>]]></content>
      <categories>
        <category>errorNote</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo快速搭建个人博客</title>
    <url>/Details/03/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Apr 24 2020 13:30:45 GMT+0800 (GMT+08:00) --><html><head></head><body><p>Hexo<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">中文官方网站</a>是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. Hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统.</p><a id="more"></a><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>利用Hexo框架diy你的博客，下面我们快速开始吧！</p><h6 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h6><ol><li><p>首先需要安装<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">node.js</a>环境,接下来在磁盘任意位置新建博客系统项目文件</p></li><li><p>可下载淘宝镜像【cnpm】提升下载速度（可选），没有则可以将下面的cnpm替换成npm安装</p></li><li><p>cnpm install -g hexo-cli （安装Hexo）</p></li><li><p>hexo -v（查看hexo版本）</p></li><li><p>在任意盘符自己创建一个工程文件用于稍后构建工程用</p></li><li><p>命令进入刚建立的工程文件输入 hexo init(初始化工程)</p></li><li><p>hexo n “我的第一篇博客文章”（添加文章）</p></li><li><p>可以进入工程目录下的source/_posts/xxx.md进行编辑文章</p></li><li><p>hexo clean (清除缓存)</p></li><li><p>hexo g(重新生成)</p></li><li><p>启动博客 hexo s</p></li></ol><ul><li>以下是部署到github pages（可选）</li></ul><ol><li><p>cnpm install –save hexo-deployer-git (安装插件)</p></li><li><p>设置_config.yml，将deployment中type的值改为git，仓库repo的值改为github上的地址，添加brach: master</p></li><li><p>hexo d(自动部署)，后面输入github密码</p></li></ol><h5 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h5><ol><li><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">下载主题</a>，下载后放入themes文件下</p></li><li><p>将主题加载进工程，修改_config.yml,将theme的值设置成下载后的主题文件夹名</p></li><li><p>hexo clean</p></li><li><p>hexo g(重新生成)</p></li><li><p>hexo s</p></li><li><p>退出，推到远程github仓库,后面可以通过免费域名访问了,输入登录用户名.github.io即可访问</p></li></ol><!-- rebuild by neat --></body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>node</tag>
      </tags>
  </entry>
</search>
